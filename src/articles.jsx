const articles = [
  {
    id: 1,
    title: 'Dashboard for retail chain inventory',
    description:
      'The client had a retail chain with dozens of locations. He needed a solution to collect inventory levels from each store, and consolidate the data into a single dashboard that reflects current levels against par levels. The dashboard enables management to track inventory levels across stores and adjust inventories among them.',
    url: './portfolio/retail-chain-inventory-reporting.html',
    image: '../img/retail-inventory-card.jpg',
    industries: ['retail'],
    technologies: ['form', 'sheet', 'report'],
    useCases: ['inventory'],
  },
  {
    id: 2,
    title: 'Reports and dashboards for construction crews',
    description:
      'The client needed automation to calculate commissions for construction crews. A Google Form is used to capture work details. A Google Apps Script calculates commissions. Google Sheets reports and dashboards visualize the data for analysis and insights.',
    url: './portfolio/construction-dashboard.html',
    image: '../img/construction-card.jpg',
    industries: ['construction'],
    technologies: ['form', 'sheets', 'report'],
    useCases: ['hr'],
  },
  {
    title: 'Consolidate multiple calendars',
    id: 3,
    image: '../img/calendar-upwork-card2.jpg',
    url: './portfolio/consolidate-calendars-for-upwork.html',
    technologies: ['calendar', 'api'],
    industries: ['consulting'],
    useCases: ['aggregation'],
    description:
      "I needed to sync my Upwork appointment scheduling with my multiple calendars without giving Upwork direct access to my calendars' events. I created a new Google account with a calendar that uses a Google Apps Script to aggregate all of my busy time slots from all my calendars.",
  },

  {
    title: 'PayPal API into Google Sheets',
    id: 4,
    image: '../img/paypal-api-card.jpg',
    url: './portfolio/paypal-api-sheets.html',
    technologies: ['sheet', 'api'],
    industries: ['accounting'],
    useCases: ['sync'],
    description:
      'This Google Apps Script pulls PayPal transactions into Google Sheets using the PayPal transactions API. Clients can run the script to pull transactions automatically every month, or pull data for custom date ranges, such as year-to-day, previous quarter, and more.',
  },

  {
    title: 'Create images from Google Slides automatically',
    id: 5,
    image: '../img/banner-engine-card2.jpg',
    url: './portfolio/banner-engine.html',
    technologies: ['slides', 'sheet'],
    industries: ['advertising'],
    useCases: ['productivity'],
    description:
      'Create web banners automatically by injecting text from Google Sheets into your Google Slides and exporting them as images.',
  },
  {
    title: 'Document Merge with JobNimbus',
    id: 6,
    image: '../img/jobnimbus-merge-card.jpg',
    url: './portfolio/jobnimbus-merge.html',
    technologies: ['sheet', 'drive', 'api'],
    industries: ['construction'],
    useCases: ['sync'],
    description:
      'My home renovation client needed to pull home owner data from his JobNimbus CRM, and create and populate new Google Docs with that information. I created a Google Apps Script that uses the JobNimbus API to pull customer data and automate document merge jobs.',
  },
  {
    title: 'Check-in Form with Camera Photo',
    id: 7,
    image: '../img/photo-checkin-card.jpg',
    url: './portfolio/photo-checkin.html',
    technologies: ['sheet', 'drive', 'camera', 'webapp'],
    industries: ['hr'],
    useCases: ['productivity'],
    description:
      'My client needed his contractors to perform onsite check-ins on a tablet using the device camera. I created a web app that enables users to snap their camera photos, upload them to Google Drive, and register their check-ins in a Google Sheet.',
  },
  {
    title: 'Multiple-document merge',
    id: 8,
    image: '../img/merge-docs-sheets-card.jpg',
    url: './portfolio/merge-docs-sheets.html',
    technologies: ['document', 'sheet', 'drive', 'pdf', 'webapp'],
    industries: [],
    useCases: ['aggregation'],
    description:
      'My client needed to merge multiple Google Sheet rows into templated Google Docs. He had many source data tabs and document templates to choose from. I created a Google Apps Script that automates data merge, and scales as more data tabs and templates are created.',
  },
  {
    title: 'Chrome extension for site scraping',
    id: 9,
    image: '../img/scrape-site-extension-card.jpg',
    url: './portfolio/scrape-site-extension.html',
    technologies: ['document', 'xml', 'api'],
    industries: [],
    useCases: ['sync'],
    description:
      "The client needed a Chrome extension, which his team would use to mark their website pages for scraping. A Google Apps Script accepts the extension's page requests, scrapes the web page, and saves the data in a Google Doc based on a template.",
  },
  {
    title: 'Scrape website pages',
    id: 10,
    image: '../img/scrape-site-extension-card.jpg',
    url: './portfolio/scrape-website.html',
    technologies: ['sheet', 'xml', 'api'],
    industries: [],
    useCases: ['sync'],
    description:
      'This Google Apps Script accepts one or more website URLs to scrape. It fetches the HTML code of each URL and then extracts different data elements from each page, based on business needs, and stores the information in a Google Sheet.',
  },
  {
    title: 'Pull Twitter data into Google Data Studio',
    id: 11,
    image: '../img/twitter-datastudio-card.jpg',
    url: './portfolio/twitter-to-datastudio.html',
    technologies: ['sheet', 'api', 'twitter'],
    industries: ['advertising'],
    useCases: ['sync'],
    description:
      'This Google Apps Script queries the Twitter API, pulling data about tweets and followers into a Google Sheet, which is synched with a Google Data Studio report.',
  },
  {
    title: 'Convert XML to CSV in Google Workspace',
    id: 12,
    image: '../img/xml-csv-card.jpg',
    url: './portfolio/xml-to-csv.html',
    technologies: ['xml', 'sheet', 'csv'],
    industries: [],
    useCases: [],
    description:
      'This Google Apps Script looks for new XML files in a Google Drive folder. It takes in a customizable mapping of XML entries to CSV headers, and automatically converts the XML to a CSV file. Both input and output files are then automatically moved to different Google Drive folders for subsequent automation.',
  },
  {
    title: 'Duplicate files and folders automatically',
    id: 13,
    image: '../img/duplicate-folders-card.jpg',
    url: './portfolio/duplicate-folders.html',
    technologies: ['drive', 'webapp'],
    industries: [],
    useCases: ['productivity'],
    description:
      'Duplicating folders in Google Drive is currently a manual process in which yoy create folders one at a time. This Google Apps Script automates the process. Users select the folder they want to copy and its target folder. The web app duplicates all files and sub-folders. Users can run this process automatically on a schedule.',
  },
  {
    title: 'Merge Google Sheets',
    id: 14,
    image: '../img/xml-csv-card.jpg',
    url: './portfolio/merge-sheets.html',
    technologies: ['csv', 'sheet', 'drive'],
    industries: [],
    useCases: ['aggregation'],
    description:
      'This Google Apps Script accepts a URL to a Google Drive folder that contains several source files (Google Sheets, Excel, and CSV). The script duplicates a sheet template, merges the source files based on a common key, and then populates the templated sheet. The output sheet includes a dashboard that summarizes key information in the spreadsheet.',
  },
  {
    title: 'Geo location lookup in Google Sheet',
    id: 15,
    image: '../img/geo-lookup-card.jpg',
    url: './portfolio/geo-lookup.html',
    technologies: ['sheet', 'api'],
    industries: ['real'],
    useCases: ['location'],
    description:
      'This Google Apps Script looks for new IP addresses that are entered in a Google Sheet. The script validates each IP address, triggers a call to a Geo lookup API, and updates a different sheet with geographical data, such asa city, state, and internet service provider.',
  },
  {
    title: 'Yahoo Finance API to Google Sheet',
    id: 16,
    image: '../img/yahoo-finance-card.jpg',
    url: './portfolio/yahoo-finance.html',
    technologies: ['sheet', 'api', 'yahoo'],
    industries: ['accounting'],
    useCases: ['sync'],
    description:
      "This Google Apps Script pulls daily stock quotes from the Yahoo Finance API. It stores the data in a Google Sheet for historical look-ups. The script updates a summary sheet by calculating today's price change in dollars and percentage.",
  },
  {
    title: 'Email Google Sheet as PDF',
    id: 17,
    image: '../img/sheet-pdf-email-card.jpg',
    url: './portfolio/sheet-pdf-email.html',
    technologies: ['sheet', 'email', 'pdf'],
    industries: [],
    useCases: ['communication'],
    description:
      'A Google Sheet contains a summary sheet that aggregates data from 12 monthly sheets. A sidebar enables users to PDF and email a single monthly sheet or the entire workbook, with customizable email recipients, subject, and body.',
  },
  {
    title: 'Google Sheet to Asana via Zapier',
    id: 18,
    image: '../img/sheet-zapier-asana-card.jpg',
    url: './portfolio/sheet-zapier-asana.html',
    technologies: ['sheet', 'trigger', 'api', 'zapier', 'asana'],
    industries: [],
    useCases: ['sync'],
    description:
      'This Google Apps Script pulls new entries from a Google Sheet in real-time. It uses a Zapier webhook to insert new to-do tasks into an Asana project. The payload includes a mix of standard and custom Asana fields. The script updates the sheet with Zapier IDs to eliminate duplicate inserts.',
  },
  {
    title: 'Calendar Events from Google Sheet',
    id: 19,
    image: '../img/sheets-to-calendar-card.jpg',
    url: './portfolio/sheets-to-calendar.html',
    technologies: ['calendar', 'sheet', 'trigger'],
    industries: ['consulting'],
    useCases: ['sync'],
    description:
      'This Google Apps Script tracks meeting requests that are entered into a Google Sheet. The script creates Google Calendar event for every registration, and populates the invite with customizable title, description, guests, and more.',
  },
  {
    title: 'Google Forms Replacement',
    id: 20,
    image: '../img/google-forms-replacement-card.jpg',
    url: './portfolio/google-forms-replacement.html',
    technologies: ['webapp', 'sheet', 'form', 'sidebar'],
    industries: [],
    useCases: ['collection'],
    description:
      'The client hit the limits of what Google Forms can offer. I developed a custom form management systems that enables admins to manage form questions and how they are ordered on the form. Included unlimited form branching and dynamic field pre-population.',
  },
  {
    title: 'Google Form File Validation',
    id: 21,
    image: '../img/form-file-validation-card.jpg',
    url: './portfolio/form-file-validation.html',
    technologies: ['form', 'sheet', 'email'],
    industries: [],
    useCases: ['collection'],
    description:
      'The project involved creating a Google Form that accepts file uploads. Upon every upload, a Google Apps Script was to validate the file against a set of validation rules that are configurable by managers. The script was to email the file submitter if errors occurred. The script was to log every submission and its validation results. Valid files are moved to a destination folder.',
  },
  {
    title: 'Google Sheets to Google Cloud Storage',
    id: 22,
    image: '../img/sheets-to-storage-card.jpg',
    url: './portfolio/sheets-to-storage.html',
    technologies: ['gcp', 'webapp', 'sheet', 'csv', 'email', 'api'],
    industries: [],
    useCases: ['sync'],
    description:
      'The project required developing a Node.js app on Google Cloud Platform that processes campaign registrations from Google Sheets. The app reads the sheet via Google Sheets API, groups the registrations by campaign ID, and creates a CSV file for each campaign. The file then gets uploaded to Google Cloud Storage, where the app sets access permission on the file. Finally, the app emails a download link to the CSV file.',
  },
  {
    title: 'Google Map in Google Sheet',
    id: 23,
    image: '../img/geo-lookup-card.jpg',
    url: './portfolio/map-in-sheets.html',
    technologies: ['sheet', 'applet', 'map', 'api'],
    industries: ['real'],
    useCases: ['location'],
    description:
      'This project involves parsing addresses in a Google Sheet along with their metadata. A Google Apps Script is launched via a custom menu. It creates a sidebar with a Google Map, converts the addresses into lat/long data points, centers the map according to the addresses, and displays the addresses as markers on the map. Address metadata is shown when the user hovers over the marker. The map can be viewed in full-screen mode.',
  },
  {
    title: 'Gmail to Google Sheets',
    id: 24,
    image: '../img/sheet-pdf-email-card.jpg',
    url: './portfolio/gmail-to-sheets.html',
    technologies: ['email', 'sheet', 'crm'],
    industries: [],
    useCases: ['communication', 'collection'],
    description:
      'This project required watching a specific Gmail inbox and capturing new email messages into a Google Sheet. The Google Apps Script also pulls out sender information into a contacts sheet. Spreadsheet owners can easily view all messages by sender.',
  },
  {
    title: 'Lead sharing app',
    id: 25,
    image: '../img/leadsharing2-card.jpg',
    url: './portfolio/lead-sharing2.html',
    technologies: ['gcp', 'webapp', 'email', 'csv'],
    industries: [],
    useCases: ['communication', 'sync'],
    description:
      'The client needed to share sales leads with channel partners in a secured way. I implemented a solution that ingests sales leads and assigned partners, builds CSV files on Google Cloud Storage, and routinely emails partners links to the CSV files. Partners must authenticate into their Google account to download the file.',
  },
  {
    title: 'Data management app',
    id: 26,
    image: '../img/leadsharing-card.jpg ',
    url: './portfolio/lead-sharing.html',
    technologies: ['gcp', 'drive', 'webapp'],
    industries: [],
    useCases: ['communication', 'sync'],
    description:
      "As a solo developer on the project, I've been designing, developing, releasing, and maintaining a secured Node.js Express web application on Google Cloud Platform. The application enables managers and their partners to track the progress of sales leads and exchange messages about lead status. Lead data is stored securely in a NoSQL database. The app offers a variety of derived data attributes that are calculated in real-time, client-side.",
  },
  {
    title: 'RSS feed parsing',
    id: 27,
    image: '../img/xml-csv-card.jpg',
    url: './portfolio/rss-parsing.html',
    technologies: ['sheet', 'rss', 'api'],
    industries: [],
    useCases: ['sync'],
    description:
      'The project needed to routinely parse a number of RSS feeds and store key information about each feed item. I created a Google Apps Script that parses an arbitrary list of feed URLs, and updates a Google Sheet with metadata and entries of each feed. The script can be run directly from the sheet menu or automatically using a timer.',
  },
  {
    title: 'Data enrichment workflow',
    id: 28,
    image: '../img/data-enrichment-card.jpg',
    url: './portfolio/data-enrichment.html',
    technologies: ['drive', 'sheet', 'excel', 'csv', 'email'],
    industries: [''],
    useCases: ['collection', 'sync'],
    description:
      'As a solo developer on the project, I created a sophisticated workflow system that handles new file submission in Google Apps Script. The system cuts down on the effort to validate and enrich the submitted files, while providing stakeholders with a clear picture  regarding the status of every submission.',
  },
  {
    title: 'CRM server in Google sheet',
    id: 29,
    image: '../img/db-api-card.jpg',
    url: './portfolio/crm-in-sheets.html',
    technologies: ['sheet', 'crm', 'webapp'],
    industries: [''],
    useCases: ['communication', 'sync'],
    description:
      "A sales manager manages all sales leads in a Google Sheet. She  needs to route leads to her team and have her reps follow up on  the leads and update their status and information. Instead of having the reps update the master sheet, she uses the  Google Apps Script web app to distribute leads to reps and update  the master sheet based on reps' local updates.",
  },
  {
    title: 'Update custom form in real-time',
    id: 30,
    image: '../img/google-forms-replacement-card.jpg',
    url: './portfolio/survey-in-survey.html',
    technologies: ['form', 'sheet', 'webapp'],
    industries: [],
    useCases: ['collection'],
    description:
      "The client needed to display a series of survey questions, and  then present the user with a followup question that is determined  in real-time, using prior survey submissions. I developed a Google Apps Script web app to capture responses,  search for best match response, display that to the user, and  record all the user's answers in the sheet.",
  },
  {
    title: 'Google Sheet columns to Docs',
    id: 31,
    image: '../img/columns-to-docs-card.jpg',
    url: './portfolio/sheet-columns-to-docs.html',
    technologies: ['sheet', 'document', 'drive'],
    industries: [],
    useCases: ['sync'],
    description:
      'As a solo developer on the project, I created a simple Google Apps Script that converts Google Sheet columns to a set of Google Docs. The script uses the header row as the name of each file. All rows in each column are populated one after the other into the body of every Google Doc.',
  },
  {
    title: 'Google Sheet to PDF',
    id: 32,
    image: '../img/sheets-to-pdf-card.jpg',
    url: './portfolio/sheet-to-pdf.html',
    technologies: ['sheet', 'pdf', 'document'],
    industries: ['accounting'],
    useCases: ['communication'],
    description:
      'I needed an invoice generator that takes Google Sheet rows and converts them to formatted PDF files. I created A Google Apps Script that is invoked from a custom menu option in Google Sheet and converts the sheet row into a PDF by  populating the row data into a formatted Google Doc template.',
  },
  {
    title: 'Expand Google Sheet rows',
    id: 33,
    image: '../img/expand-sheet-rows-card.jpg',
    url: './portfolio/expand-row.html',
    technologies: ['sheet'],
    industries: [],
    useCases: ['sync'],
    description:
      'In this small project, the client had a Google Sheet with two tabs (summary and detail), and required a way to expand summary rows  based on date range in each of the rows. I developed a Google Apps  Script to enable the client to expand the rows on demand.',
  },
  {
    title: 'Website message from Google Sheet',
    id: 34,
    image: '../img/scrape-site-extension-card.jpg',
    url: './portfolio/message-from-spreadsheet.html',
    technologies: ['sheet', 'webapp'],
    industries: [],
    useCases: ['communication'],
    description:
      'In this small project, the client had a standalone website that  was separate from Google GSuite. The client needed to present a personal message to every logged-in  user. Messages were stored in a two-column Google Spreadsheet  column containing email addresses and the message for each user. The project requiring fetching the right message as the user  accessed the message page.',
  },
  {
    title: 'Static site generator for MarTech demos',
    id: 35,
    image: '../img/scrape-site-extension-card.jpg',
    url: './portfolio/static-site-generator.html',
    technologies: ['webapp'],
    industries: ['retail'],
    useCases: ['productivity'],
    description:
      'In this project, I delivered a static website generator to a  MarTech vendor who needed to showcase its solutions on demo  websites for different industry verticals. The generator is fully customizable: The client generates category  and product feeds for retail, financial services, and other verticals. The client modifies page template for each vertical. The generator then uses the feeds and the templates to generate  the static sites.',
  },
]

export default articles
